#!/usr/bin/env ruby
# -*- encoding : utf-8 -*-

require 'optparse'

require 'fsinv'

DEFAULT_NAME = "inventory"
USAGE = "Usage: fsinv [options] basepath1 [basepath2 [basepath3 [...]]] "

Fsinv::options = {}
OptionParser.new do |opts|
  opts.banner = USAGE
  opts.separator ""
  opts.separator "fsinv is used to index file systems. By default for each file/directory the size"
  opts.separator "in bytes as well as creation time (ctime) and modification time (mtime) are indexed."
  opts.separator ""
  opts.separator "Files additionally have their mime type, magic file description (see 'man file'),"
  opts.separator "OSX Finder tags (kMDItemUserTags) if run on osx, and a special 'fshugo' extended"
  opts.separator "file attribute (used by https://github.com/mpgirro/fshugo) stored as well."
  opts.separator ""
  opts.separator "Directories have also their xattr (osx, fshugo) stored, as well as a count of their"
  opts.separator "direct children files (file_count), direct children directories (dir_count) and a"
  opts.separator "general children item count (all dir/item count throughout their descendent hierarchie"
  opts.separator "tree)"
  opts.separator ""
  opts.separator "Multiple file system hierarchie trees can be indexed simultaniously, by using more than"
  opts.separator "one basepath (see the usage)"
  opts.separator ""
  opts.separator "Note that some files are ignored (like .AppleDouble, .DS_Store, Thumbs.db, etc.)"
  opts.separator "Additionally, some directories will only have reduced indizes (e.g. only their byte size,"
  opts.separator "yet no children file list), for their content is huge of files, yet they are of lesser"
  opts.separator "interest (like .git, .wine, etc.)"
  opts.separator ""
  opts.separator "On OSX system, some items appear as files yet are in fact directories (.app, .bundle)"
  opts.separator "They will be marked as directories, but will only have their sizes calculated. Their"
  opts.separator "inner file hierarchie is also of lesser interrest."
  opts.separator ""
  opts.separator "Specific options:"
  opts.separator ""
  
  opts.on("-a", "--all", "Save in all formats to the default destinations.", 
                         "Equal to -b -j -q -x -y. Use -n to change the ",
                         "file names of all inventorys at once.") do |all_flag|
    Fsinv::options[:binary]  = true
    Fsinv::options[:json]    = true
    Fsinv::options[:db]      = true
    Fsinv::options[:xml]     = true
    Fsinv::options[:yaml]    = true
  end
  #opts.separator ""
  
  opts.on("--binary [FILE]", "Dump inventory data in binary format. Default is ~/#{DEFAULT_NAME}.bin") do |binary_file|
    Fsinv::options[:binary] = true
    Fsinv::options[:binary_file] = binary_file
  end
  #opts.separator ""
  
  opts.on("--crc32", "Calculate CRC32 checksum for each file") do |crc|
    Fsinv::options[:crc32] = true
  end
  #opts.separator ""
  
  opts.on("--db [FILE]", "Save inventory as SQLite database. Default is ~/#{DEFAULT_NAME}.db") do |sql_file|
    Fsinv::options[:db] = true
    Fsinv::options[:db_file] = sql_file 
  end
  #opts.separator ""

  opts.on("-j", "--json [FILE]", "Save inventory in JSON file format. Default is ~/#{DEFAULT_NAME}.json") do |json_file|
    Fsinv::options[:json] = true
    Fsinv::options[:json_file] = json_file
  end
  #opts.separator ""
  
  opts.on("--md5", "Calculate MD5 hash for each file") do |md5|
    Fsinv::options[:md5] = true
  end
  #opts.separator ""

  opts.on("-n", "--name NAME", "Change outputfile name. Default is '#{DEFAULT_NAME}'.", 
                               "Specific targets for file formats will overwrite this.") do |name|
    Fsinv::options[:name] = name
  end
  #opts.separator ""

  opts.on("-p", "--print FORMAT", [:json, :yaml, :xml], "Print a format to stdout (json|yaml|xml)") do |format|
    Fsinv::options[:print] = true
    Fsinv::options[:print_format] = format
  end
  #opts.separator ""

  opts.on("-s", "--silent", "No output or non-critical error messages will be printed") do |s|
    Fsinv::options[:silent] = s
  end
  #opts.separator ""

  opts.on("-v", "--verbose", "Output processed filenames and non-critical errors too") do |v|
    Fsinv::options[:verbose] = v
  end
  #opts.separator ""
  
  opts.on("--xml [FILE]", "Save inventory in XML file format. Default is ~/#{DEFAULT_NAME}.xml") do |xml_file|
    Fsinv::options[:xml] = true
    Fsinv::options[:xml_file] = xml_file 
  end
  #opts.separator ""

  opts.on("--yaml [FILE]", "Save inventory in YAML file format. Default is ~/#{DEFAULT_NAME}.yaml") do |yaml_file|
    Fsinv::options[:yaml] = true
    Fsinv::options[:yaml_file] = yaml_file
  end
  #opts.separator ""
  
  opts.on_tail("--version", "Show version") do
    puts ::Version.join('.')
    exit
  end
  
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
end.parse! # do the parsing. do it now!

#p Fsinv::options
#p ARGV

if ARGV[0].nil? 
  puts "No basepath provided. At least one needed"
  puts USAGE
  exit
end

ARGV.each do |arg|
  unless File.directory?(arg)
    puts "Not a directory: #{arg}"
    puts USAGE
    exit
  end 
end

if Fsinv::options[:crc32]
  begin
    require 'digest/crc32'
  rescue
    puts "You have selected crc32 calculation option. This requires gem 'digest/crc32'."
    puts "Install using 'gem install digest-crc'"
    exit
  end
end

if Fsinv::options[:md5] 
  begin
    require 'digest/md5'
  rescue
    puts "You have selected md5 calculation option. This requires gem 'digest/md5'."
    puts "Install using 'gem install digest'"
    exit
  end
end

file_structure = []
ARGV.each do |basepath|
  file_structure << Fsinv.parse(basepath)
end

inventory = Fsinv::Inventory.new(file_structure)

unless Fsinv::options[:silent]
  file_structure.each do |fs_tree|
    size = fs_tree.bytes
    puts "basepath: #{fs_tree.path}"
    puts "    size:  #{Fsinv.pretty_SI_bytes(size)} (#{size} Bytes)"
    puts "    files: #{fs_tree.file_list.length}"
    puts "    items: #{fs_tree.item_count}"
  end
  if file_structure.length > 1
    size = inventory.size
    puts "total:"
    puts "    size:  #{Fsinv.pretty_SI_bytes(size)} (#{size} Bytes)"
    puts "    items: #{inventory.item_count}"
  end
end

# this is the default output
unless (Fsinv::options[:binary] || Fsinv::options[:db] || Fsinv::options[:xml] || Fsinv::options[:yaml]) && Fsinv::options[:json].nil?
  if Fsinv::options[:json_file].nil?
    Fsinv::options[:json_file] = File.join(Dir.home,
      if Fsinv::options[:name].nil?
        "#{DEFAULT_NAME}.json"
      else 
        "#{Fsinv::options[:name]}.json"
      end
    )
  end
  
  puts "writing JSON to #{Fsinv::options[:json_file]}" unless Fsinv::options[:silent]
  
  begin
    require 'json'
    
    # monkey-patch for "JSON::NestingError: nesting is too deep"
    module JSON
      class << self
        def parse(source, opts = {})
          opts = ({:max_nesting => 100}).merge(opts)
          Parser.new(source, opts).parse
        end
      end
    end
    
    json_data = Fsinv.inventory_to_json(inventory)
    
    unless json_data.nil?
      begin       
        file = File.open(Fsinv::options[:json_file], 'w') 
        file.write(json_data)
      rescue
        puts "error writing JSON file"
      ensure
        file.close unless file.nil?
      end
    end
  rescue LoadError
    puts "gem 'json' needed for JSON creation. Install using 'gem install json'"
  end
end

if Fsinv::options[:yaml]
  if Fsinv::options[:yaml_file].nil?
    Fsinv::options[:yaml_file] = File.join(Dir.home,
      if Fsinv::options[:name].nil?
        "#{DEFAULT_NAME}.yaml"
      else
        "#{Fsinv::options[:name]}.yaml"
      end
    )
  end
  puts "writing YAML to #{Fsinv::options[:yaml_file]}" unless Fsinv::options[:silent]
  yaml_data = Fsinv.inventory_to_yaml(inventory)
  unless yaml_data.nil?
    begin
      file = File.open(Fsinv::options[:yaml_file], 'w') 
      file.write(yaml_data)
    rescue
      puts "error writing YAML file"
    ensure
      file.close unless file.nil?
    end
  end
end

if Fsinv::options[:binary]
  if Fsinv::options[:binary_file].nil?
    Fsinv::options[:binary_file] = File.join(Dir.home,
      if Fsinv::options[:name].nil?
        "#{DEFAULT_NAME}.bin"
      else
        "#{Fsinv::options[:name]}.bin"
      end
    )
  end
  puts "writing binary dump to #{Fsinv::options[:binary_file]}" unless Fsinv::options[:silent]
  begin
    file = File.open(Fsinv::options[:binary_file], 'wb') 
    file.write(Marshal.dump(inventory))
  rescue
    puts "error writing binary dump file"
  ensure
    file.close unless file.nil?
  end
end

if Fsinv::options[:db]
  if Fsinv::options[:db_file].nil?
    Fsinv::options[:db_file] = File.join(Dir.home,
      if Fsinv::options[:name].nil?
        "#{DEFAULT_NAME}.db"
      else
        "#{Fsinv::options[:name]}.db"
      end
    )
  end

  puts "writing database dump to #{Fsinv::options[:db_file]}" unless Fsinv::options[:silent]
  `rm #{Fsinv::options[:db_file]}` if File.exists?(Fsinv::options[:db_file])

  begin
    
    require 'active_record'

    ActiveRecord::Base.establish_connection(
        :adapter => "sqlite3",
        :database  => Fsinv::options[:db_file]
    )
    
    ActiveRecord::Schema.define do

      create_table :file_structures, force: true do |t|
        t.datetime :created_at
        t.datetime :updated_at
        t.string   :path
        t.integer  :bytes
        t.datetime :ctime
        t.datetime :mtime
        t.string   :entity_type
        t.integer  :file_count
        t.integer  :item_count
        t.string   :osx_tags
        t.string   :fshugo_tags
        t.integer  :mimetype
        t.integer  :magicdescr
      end

      create_table :fshugo_tags, force: true do |t|
        t.string :tag
      end

      create_table :magic_descriptions, force: true do |t|
        t.string :magicdescr
      end

      create_table :mime_types, force: true do |t|
        t.string :mimetype
      end

      create_table :osx_tags, force: true do |t|
        t.string :tag
      end

    end
    
    class MimeType < ActiveRecord::Base
      attr_accessor :mimetype
    end

    class MagicDescription < ActiveRecord::Base
      attr_accessor :magicdescr
    end
    
    class FshugoTag < ActiveRecord::Base
      attr_accessor :tag
    end
    
    class OsxTag < ActiveRecord::Base
      attr_accessor :tag
    end
    
    class FileStructure < ActiveRecord::Base
      attr_accessor :path, :bytes, :ctime, :mtime, :entity_type
      attr_accessor :file_count, :item_count # used if referencing a directory
      attr_accessor :mimetype, :magicdescr # used if referencing a file
      attr_accessor :osx_tags, :fshugo_tags

      serialize :osx_tags,Array    # tags is text type, make it behave like an array
      serialize :fshugo_tags,Array # tags is text type, make it behave like an array  
    end
    
    inventory.mime_tab.val_map.each { |id, val| MimeType.create(:mimetype => val) }
    inventory.magic_tab.val_map.each { |id, val| MagicDescription.create(:magicdescr => val) }
    inventory.fshugo_tab.val_map.each { |id, val| FshugoTag.create(:tag => val) }
    inventory.osx_tab.val_map.each { |id, val| OsxTag.create(:tag => val) }
    inventory.file_structure.each { |fstruct| Fsinv.filestructure_to_db(fstruct) }
    
  rescue SQLite3::Exception => e 
      puts e
  rescue LoadError
    puts "gem 'active_record' needed for DB creation. Install using 'gem install active_record'"
  end
end

if Fsinv::options[:xml]
  if Fsinv::options[:xml_file].nil?
    Fsinv::options[:xml_file] = File.join(Dir.home,
      if Fsinv::options[:name].nil?
        "#{DEFAULT_NAME}.xml"
      else
        "#{Fsinv::options[:name]}.xml"
      end
    )
  end
  
  puts "writing XML to #{Fsinv::options[:xml_file]}" unless Fsinv::options[:silent]

  #$progressbar = ProgressBar.new(inventory.file_structure.inject{ |arr,item| arr + item.item_count }, :bar, :counter)
  xml_data = Fsinv.inventory_to_xml(inventory)
  
  unless xml_data.nil?
    begin
      file = File.open(Fsinv::options[:xml_file], 'w') 
      file.write(xml_data)
    rescue
      puts "error writing XML file"
    ensure
      file.close unless file.nil?
    end
  end
end

if Fsinv::options[:print]  
  print_data = case Fsinv::options[:print_format] 
               when :json then Fsinv.inventory_to_json(inventory)
               when :xml  then Fsinv.inventory_to_xml(inventory)
               when :yaml then Fsinv.inventory_to_yaml(inventory)
               else nil
               end
  puts print_data unless print_data.nil?
end
